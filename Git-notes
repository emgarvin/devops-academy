Cloning – cloning down = download a copy of a repo locally, can change it locally but no access to the master repo

Git init = create new git project

Ls –a  = show hidden files

Git status = show what git sees, what’s under its control, what it can track – importantly, what is NOT TRACKED by git

Git ad d = stage files, add them to git’s tracked list and ready them to be committed

Git commit –m “added helloworld.sh and cattest.sh” = write a commit message and create a commit

Git log = show commit history FROM CURRENT BRANCH (there are ways to get logs of other branches)

Git remote add origin https://github.com/emgarvin/devops-academy.git

Git remote –v = show the origins

Git push origin master

Git pull – pulls down EVERYTHING in the repo (has to have a .git in the folder)

Git pull origin master – get a specific branch (master)

Git log -1 = just see last commit

Git blame helloworld.sh

Git config - -local/global user.name “emgarvin”
Git config - -local/global user.email “gar18@” 

Git config - -global core.editer “vim”

Git show COMMITHASH – show changes made in commit

Git show –name-only COMMITHASH = show only the title of files that were changed

Git show –p COMMITHASH:FILENAME = show what’s in the file in this commit; investigate problems which showed up in the past

Git checkout COMMITHASH = change active version to version at the time of commit
 You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

git checkout master = go back to master head commit

git checkout –b yay-my-first-branch = create new branch based on current commit
git push origin yay-my-first-branch = you need to specify the destination for a new branch because no upstream has been created yet

git merge 

git checkout HEAD~1 or HEAD~2 – check out to the commit before the latest commit, usw

git branch steven-feature – create a branch at current position, BUT it’s not checked out the way it would have been if you used git checkout –b steven-feature

git stash – save stuff in staging area, without committing it. Doesn’t need any further arguments.

Git stash list – see what stashes you have.
 
Git stash apply STASHNAME – go back to working on your stashed work, can commit from there

Git stash pop STASHNAME – same as apply, but delete the saved copy of the stash

Git stash drop STASHNAME – get rid of stash

ctrl u = cut command to buffer. ctrl y = paste command
ctrl a = bring you back to the start of the current comment.
ctrl e = take you to the end of the command
ctrl w = delete current word in command
grep = search text. \n
git log | grep add
git log | grep add -B 5
git log --grep add   does both at once
git commit --amend = you've committed a commit message but you didn't put enough information in, you're not changing the files but you ARE changing the commit message. Doesn't affect the files committed, just the message. Just amend the latest commit, not old ones.
git rebase - the command Martin hates most - squashes all the commits into one - loses a lot of commit data in the process, makes it harder to debug in the future. Avoid if possible.
vi .gitignore = edit the .gitignore config file. Tell git about files it should ignore (eg sensitive files with data or passwords, /target/* in maven
*.jar, or other regex will ignore whole patterns of files
Will also prevent these files from showing up in untracked if you use git status

git submodules = smaller subprojects

aliases = shorthand for a command

git config --global alias.st status = just type git st to get the status

BASH ALIASES
go to home directory
vi ~/.bashrc
alias gs='git status'
alias sd='sudo docker'
THEN TYPE bash TO RESET reinitialise the bash config

git config 
============================
more config
more HEAD
more COMMIT_EDITMSG -- what is the template for a commit message? could add a ticket number requirement for example. 
find logs/ = list files in logs
find . -name heads

.git/hooks
= as we're doing commands we can have a hook to say "before I commit, do this"
= can use the samples in /hooks by removing the .sample
= can set a unit test to run before something is committing, and fail if unit test fails

.git/hooks/commit-msg = check for certain information in the commit

ls -lthri /bin/sh

in linux, exit code 0 = true/great/all working, anything else = something has gone wrong. 

cd -  = go back to the directory you were in
 
